@using Microsoft.Extensions.Logging;
@implements IAsyncDisposable;
@inject IJSRuntime jsRuntime;
@inject ILogger<App> logger;
<style>
    .dialer {
    margin: 0 auto; width: 235px;
    }

    .dial-pad button {
    display: block;
    float: left;
    border-radius: 37.5px;
    width: 75px;
    height: 75px;
    margin-bottom: 5px;
    margin-right: 5px;
    font-size: 24px;
    }

    .dial-pad button:nth-child(3n) {
    margin-right: 0;
    }
</style>

<div class="dialer">
    <div class="input-group w-100 mb-2">
        <input 
            @bind="dialNumber" 
            @bind:event="oninput"
            disabled="@(!isTwilioDeviceReady || isTwilioDeviceConnected || hasIncomingConnection)" 
            type="text" 
            class="form-control text-center" 
            placeholder="Phonenumber">
        <div class="input-group-append">
            <button 
                @onclick="RemoveKey" 
                disabled="@(!isTwilioDeviceReady || isTwilioDeviceConnected || hasIncomingConnection || dialNumber.Length == 0)" 
                class="btn btn-outline-secondary" 
                type="button"><span
                class="oi oi-delete"></span></button>
        </div>
    </div>
    <div class="dial-pad clearfix w-100 mb-2">
        @foreach (var dialKey in dialKeys)
        {
            <button @onclick="() => PressKey(dialKey)" class="btn btn-dark" type="button">@dialKey</button>
        }
    </div>
    <div class="btn-group w-100">
        @if(hasIncomingConnection){
            <button 
                @onclick="RejectCall" 
                type="button" 
                class="btn btn-danger w-50"
                >Reject</button>
            <button 
                @onclick="AcceptCall" 
                type="button" 
                class="btn btn-success w-50"
                >Accept</button>
        }else{
            <button 
                @onclick="EndCall" 
                disabled="@(!isTwilioDeviceReady || !isTwilioDeviceConnected)" 
                type="button" 
                class="btn btn-danger w-50"
                >Hang up</button>
            <button 
                @onclick="StartCall" 
                disabled="@(!isTwilioDeviceReady || isTwilioDeviceConnected || dialNumber.Length == 0)" 
                type="button" 
                class="btn btn-success w-50"
                >Call</button>
        }
    </div>
    <p class="text-center">
        @if(isTwilioDeviceConnected){
            <text>Calling @connectedNumber</text>
        }
    </p>
</div>
    @code{
    private static readonly HttpClient httpClient = new HttpClient();
    private static readonly string dialKeys = "123456789*0#";
    private DotNetObjectReference<App> dotNetObjectReference;
    private string dialNumber = "";
    private string connectedNumber = "";
    private bool isTwilioDeviceReady = false;
    private bool isTwilioDeviceConnected = false;
    private bool hasIncomingConnection = false;

    public App()
    {
        dotNetObjectReference = DotNetObjectReference.Create(this);
    }

    private void PressKey(char key)
    {
        dialNumber += key;
    }

    private void RemoveKey()
    {
        dialNumber = dialNumber.Remove(dialNumber.Length - 1);
    }

    private async Task StartCall()
    {
        await jsRuntime.InvokeVoidAsync("dialer.startCall", dialNumber);
    }

    private async Task EndCall()
    {
        await jsRuntime.InvokeVoidAsync("dialer.endCall");
    }

    private async Task RejectCall()
    {
        await jsRuntime.InvokeVoidAsync("dialer.rejectCall");
    }

    private async Task AcceptCall()
    {
        await jsRuntime.InvokeVoidAsync("dialer.acceptCall");
    }

    [JSInvokable]
    public void OnTwilioDeviceReady()
    {
        isTwilioDeviceReady = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTwilioDeviceError(string error)
    {
        logger.LogError(error);
    }

    [JSInvokable]
    public void OnTwilioDeviceConnected(string phoneNumber)
    {
        isTwilioDeviceConnected = true;
        hasIncomingConnection = false;
        connectedNumber = phoneNumber;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTwilioDeviceDisconnected()
    {
        isTwilioDeviceConnected = false;
        hasIncomingConnection = false;
        connectedNumber = "";
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTwilioDeviceIncomingConnection()
    {
        hasIncomingConnection = true;
        StateHasChanged();
    }

    
    [JSInvokable]
    public void OnTwilioDeviceCanceled()
    {
        hasIncomingConnection = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("dialer.setDotNetObjectReference", dotNetObjectReference);
        await jsRuntime.InvokeVoidAsync("dialer.setupTwilioCallbacks");
        var jwtToken = await httpClient.GetStringAsync("https://localhost:5001/token");
        await jsRuntime.InvokeVoidAsync("dialer.setupTwilioDevice", jwtToken);
    }

    public async ValueTask DisposeAsync()
    {
        await jsRuntime.InvokeVoidAsync("dialer.destroy");
        dotNetObjectReference?.Dispose();
    }
}